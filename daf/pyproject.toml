[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "daf"
version = "0.1.0"
description = "Distributed Agent Framework - Professional Metta AI fork"
readme = "README.md"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [
    { name = "DAF Contributors", email = "contributors@daf-framework.org" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = [
    "reinforcement-learning",
    "multi-agent",
    "ai",
    "simulation",
    "metta",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "typer>=0.9.0",
    "rich>=13.7.0",
    "pyyaml>=6.0.1",
    "tomli>=2.0.1",
    "tomli-w>=1.0.0",
    # Async and networking
    "httpx>=0.25.0",
    "aiofiles>=23.2.1",
    "aiohttp>=3.9.0",
    # Data processing and analysis
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    # Scientific computing
    "scipy>=1.11.0",
    "scikit-learn>=1.3.0",
    # Configuration and CLI
    "dynaconf>=3.2.0",
    "click>=8.1.0",
    # Metta AI integration - use local installation
    "mettagrid",
    "pufferlib-core>=3.0.0",
    # Validation and testing utilities
    "pytest-asyncio>=0.21.0",
    "hypothesis>=6.88.0",
    "faker>=20.0.0",
    "boto3>=1.40.38",
    "google-auth>=2.40.3",
    "google-auth-oauthlib>=1.2.2",
    "google-api-python-client>=2.183.0",
    "duckdb>=1.4.0",
]

[project.urls]
Homepage = "https://github.com/daf-framework/daf"
Documentation = "https://daf.readthedocs.io"
Repository = "https://github.com/daf-framework/daf"
Issues = "https://github.com/daf-framework/daf/issues"
Changelog = "https://github.com/daf-framework/daf/blob/main/CHANGELOG.md"

[project.scripts]
daf = "daf.cli.main:main"
daf-install = "scripts.install:main"
daf-validate = "scripts.validate:main"
daf-run = "scripts.run_experiment:main"

[dependency-groups]
# Development dependencies
dev = [
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "pre-commit>=3.5.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "codespell>=2.2.0",
]

# Testing dependencies
testing = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.1.0",
    "coverage[toml]>=7.3.0",
    "hypothesis>=6.88.0",
    "faker>=20.0.0",
    "freezegun>=1.2.0",
    "responses>=0.24.0",
    "testcontainers>=4.0.0",
]

# Documentation dependencies
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.23.0",
    "mkdocs-autorefs>=0.5.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "pymdown-extensions>=10.3.0",
    "markdown-exec>=1.7.0",
]

# Interactive development
interactive = [
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
    "ipython>=8.15.0",
    "jupyterlab>=4.0.0",
    "notebook>=7.0.0",
    "ipywidgets>=8.1.0",
    "matplotlib-inline>=0.1.0",
]

# Performance profiling
performance = [
    "py-spy>=0.3.0",
    "line-profiler>=4.1.0",
    "memory-profiler>=0.61.0",
    "scalene>=1.5.0",
    "pyinstrument>=4.5.0",
]

# Metta AI specific dependencies
metta = [
    "mettagrid",
    "pufferlib-core>=3.0.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    "wandb>=0.15.0",
]

# Optional GPU support
gpu = ["torch[cuda]>=2.0.0", "pynvml>=11.5.0", "gputil>=1.4.0"]

[tool.hatch.envs.default]
dependencies = ["mettagrid"]

[tool.hatch.envs.test]
dependencies = ["pytest", "pytest-asyncio", "pytest-cov"]

[tool.hatch.envs.lint]
dependencies = ["ruff", "mypy", "pre-commit"]

[tool.hatch.envs.docs]
dependencies = ["mkdocs", "mkdocs-material"]

# Ruff configuration
[tool.ruff]
line-length = 120
target-version = "py311"
extend-exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "build",
    "dist",
    "__pycache__",
    "node_modules",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "A",   # flake8-builtins
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B9",  # flake8-bugbear
    "SIM", # flake8-simplify
    "RSE", # flake8-raise
    "DTZ", # flake8-datetimez
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "SLF", # flake8-self
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy-specific rules
    "AIR", # airflow
    "TID", # flake8-tidy-imports
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSC", # ruff-specific rules
    "RUF", # ruff-specific rules
    "PTH", # flake8-use-pathlib
    "TCH", # flake8-type-checking
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
]

ignore = [
    "E203",   # whitespace before ':'
    "E501",   # line too long
    "S101",   # assert used
    "S104",   # exception without raise
    "FBT001", # boolean positional arg in function definition
    "FBT002", # boolean default positional argument
    "FBT003", # boolean positional arg in function call
    "A003",   # class attribute shadows stdlib module
    "EM101",  # exception must not use a string literal
    "EM102",  # exception must not use an f-string literal
    "TRY003", # avoid specifying long messages outside exception class
    "COM812", # missing trailing comma
    "ISC001", # implicitly concatenated string literals
    "Q000",   # single quotes found but double quotes preferred
    "Q001",   # single quote multiline found but double quotes preferred
    "Q002",   # single quote docstring found but double quotes preferred
    "Q003",   # change outer quotes to avoid escaping inner quotes
    "RSE102", # unnecessary parentheses on raised exception
    "SLF001", # private member accessed
    "TD002",  # missing author in TODO
    "TD003",  # missing issue link in TODO
    "FIX002", # line contains TODO
    "INP001", # file is part of implicit namespace package
    "PTH100", # os.path.abspath should be replaced by Path.resolve()
    "PTH101", # os.chmod should be replaced by Path.chmod()
    "PTH102", # os.mkdir should be replaced by Path.mkdir()
    "PTH103", # os.makedirs should be replaced by Path.mkdir(parents=True)
    "PTH104", # os.rename should be replaced by Path.rename()
    "PTH105", # os.replace should be replaced by Path.replace()
    "PTH106", # os.rmdir should be replaced by Path.rmdir()
    "PTH107", # os.remove should be replaced by Path.unlink()
    "PTH108", # os.unlink should be replaced by Path.unlink()
    "PTH109", # os.getcwd should be replaced by Path.cwd()
    "PTH110", # os.path.exists should be replaced by Path.exists()
    "PTH111", # os.path.expanduser should be replaced by Path.expanduser()
    "PTH112", # os.path.isdir should be replaced by Path.is_dir()
    "PTH113", # os.path.isfile should be replaced by Path.is_file()
    "PTH114", # os.path.islink should be replaced by Path.is_symlink()
    "PTH115", # os.path.isabs should be replaced by Path.is_absolute()
    "PTH116", # os.path.join should be replaced by Path.joinpath()
    "PTH117", # os.path.basename should be replaced by Path.name
    "PTH118", # os.path.dirname should be replaced by Path.parent
    "PTH119", # os.path.samefile should be replaced by Path.samefile()
    "PTH120", # os.path.splitext should be replaced by Path.suffix
    "PTH121", # os.path.splitext should be replaced by Path.with_suffix()
    "PTH122", # os.path.split should be replaced by Path.parts
    "PTH123", # open should be replaced by Path.open()
    "SIM108", # use ternary operator instead of if-else
    "SIM105", # use contextlib.suppress instead of try-except
    "SIM114", # combine if statements using any/all
    "SIM115", # use contextlib.suppress instead of try-except
    "SIM117", # use dict.get() instead of dict[key] and dict.get(key, default)
    "SIM118", # use dict.get() instead of dict[key] and dict.get(key, default)
    "SIM201", # use min() instead of sorted() for single value
    "SIM202", # use max() instead of sorted() for single value
    "SIM300", # use enumerate() instead of range(len())
    "SIM401", # use dict.get() instead of dict[key] and dict.get(key, default)
    "SIM905", # use str.split() instead of str.split(' ')
    "SIM906", # use str.splitlines() instead of str.split('\n')
    "SIM910", # use str.partition() instead of str.split()
    "SIM911", # use str.split() instead of str.splitlines()
    "SIM912", # use str.splitlines() instead of str.split('\n')
    "SIM913", # use str.partition() instead of str.split()
    "SIM914", # use str.split() instead of str.splitlines()
    "SIM915", # use str.splitlines() instead of str.split('\n')
    "SIM916", # use str.partition() instead of str.split()
    "SIM917", # use str.split() instead of str.splitlines()
    "SIM918", # use str.splitlines() instead of str.split('\n')
    "SIM919", # use str.partition() instead of str.split()
    "SIM920", # use str.split() instead of str.splitlines()
    "SIM921", # use str.splitlines() instead of str.split('\n')
    "SIM922", # use str.partition() instead of str.split()
    "SIM923", # use str.split() instead of str.splitlines()
    "SIM924", # use str.splitlines() instead of str.split('\n')
    "SIM925", # use str.partition() instead of str.split()
    "SIM926", # use str.split() instead of str.splitlines()
    "SIM927", # use str.splitlines() instead of str.split('\n')
    "SIM928", # use str.partition() instead of str.split()
    "SIM929", # use str.split() instead of str.splitlines()
    "SIM930", # use str.splitlines() instead of str.split('\n')
]

[tool.ruff.lint.isort]
known-first-party = ["daf"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "SLF001", "PT013"]
"scripts/**/*.py" = ["T201"]
"docs/**/*.py" = ["T201", "INP001"]
"src/daf/**/*.py" = ["T201"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*", "scripts.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Coverage configuration
[tool.coverage.run]
source = ["src/daf"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/conftest.py",
    "*/__init__.py",
    "src/daf/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=src/daf",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--cov-fail-under=95",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "performance: marks tests as performance tests",
    "network: marks tests as requiring network access",
    "gpu: marks tests as requiring GPU access",
    "asyncio: marks tests as async tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning",
]

# uv configuration
[tool.uv]
cache-keys = [
    { file = "pyproject.toml" },
    { file = "uv.lock" },
    { file = "src/**/*.py" },
    { git = { commit = "main" } },
]
default-groups = ["dev", "testing"]

[tool.uv.workspace]
members = ["."]

[tool.uv.sources]
# Add any custom sources here

[tool.codespell]
skip = ".git,*.pdf,*.svg,*.lock,*.toml,*.json"
ignore-words-list = "hist,nd,te,fo,ba,nd"

[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["daf"]
skip = ["__init__.py", "tests/conftest.py"]
