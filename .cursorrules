# Cursor Rules for daf fork of Metta Project

## DAF Fork Repository Structure (ENTRENCHED)

### Location Policy - Two Distinct Folders
**MANDATORY**: DAF fork uses two distinct, entrenched locations:

#### 1. `daf/` - DAF Fork Source Code and Materials
- **Location**: `daf/` (root level, no @ prefix)
- **Purpose**: All DAF fork source code, configurations, and outputs
- **Contents**: `src/daf/`, `tests/`, `configs/`, `outputs/`, `doc/`
- **Policy**: This is the main DAF fork development location

#### 2. `@daf/` - Autogenerated Documentation from Metta
- **Location**: `@daf/` (root level, with @ prefix)
- **Purpose**: All autogenerated documentation derived from main Metta repository
- **Contents**: `methods/`, `structure/`, documentation scripts, metadata
- **Policy**: Contains documentation of Metta methods for DAF fork utilization

### Documentation Organization
**MANDATORY**: Use the established DAF documentation structure:

```
@daf/                           # Autogenerated Metta documentation
├── methods/                    # Individual method documentation (129 files)
│   ├── adaptive_*.md          # Adaptive learning methods
│   ├── cogworks_*.md          # Cognitive system methods
│   ├── rl_*.md                # RL framework methods
│   ├── setup_*.md             # Setup and configuration methods
│   ├── sim_*.md               # Simulation methods
│   └── tools_*.md             # Development tools methods
└── structure/                  # Repository structure metadata (4 files)
    ├── METTA_REPOSITORY_STRUCTURE.md  # Complete repository overview
    ├── method_distribution.json       # Method distribution data
    ├── module_dependencies.json       # Module dependency graph
    └── integration_patterns.md        # Integration patterns for DAF fork
```

```
daf/                            # DAF fork source code and materials
├── src/daf/                    # DAF fork source code
├── tests/                      # DAF fork tests
├── configs/                    # DAF fork configurations
├── outputs/                    # DAF fork outputs and results
├── doc/                        # DAF fork documentation
└── daf.log                     # DAF fork logs
```

### Maximal Metta Method Utilization

#### Method Discovery
**MANDATORY**: Use `@daf/methods/` folder for all API reference:
```bash
# Browse all adaptive learning methods
ls @daf/methods/adaptive_*.md

# Find specific functionality
cat @daf/methods/rl_training_core.md

# Search for specific patterns
grep "AdaptiveController" @daf/methods/adaptive_*.md
```

#### Structure Analysis
**MANDATORY**: Reference `@daf/structure/` for all architectural decisions:
```bash
# Repository overview and metadata
cat @daf/structure/METTA_REPOSITORY_STRUCTURE.md

# Method distribution analysis
cat @daf/structure/method_distribution.json

# Integration patterns and best practices
cat @daf/structure/integration_patterns.md
```

#### DAF Source Code Development
**MANDATORY**: All DAF fork development in `daf/` folder:
```bash
# DAF fork source code
ls daf/src/daf/

# DAF fork tests
ls daf/tests/

# DAF fork configurations
ls daf/configs/

# DAF fork outputs
ls daf/outputs/
```

#### Enhanced Function Signatures
**MANDATORY**: All Metta methods documented with complete signatures:
- Parameter types with generic support (e.g., `List[str]`, `Optional[Dict]`)
- Return type annotations (e.g., `-> Tuple[bool, str]`)
- Default values clearly indicated
- Type hints for IDE support

### Integration Patterns
**MANDATORY**: Follow established integration patterns from `structure/integration_patterns.md`:

#### 1. Adaptive Learning Integration
```python
from metta.adaptive.adaptive_controller import AdaptiveController
from metta.cogworks.curriculum.curriculum import Curriculum
from metta.adaptive.stores.wandb import WandbStore
```

#### 2. Reinforcement Learning Integration
```python
from metta.rl.trainer import Trainer
from metta.rl.training.core import CoreTrainingLoop
from metta.rl.checkpoint_manager import CheckpointManager
```

#### 3. Configuration Management Integration
```python
from metta.setup.metta_cli import MettaCLI
from metta.setup.saved_settings import SavedSettings
```

### DAF Fork Development Workflow

#### 1. Method Discovery
**MANDATORY**: Start all development by exploring available methods:
```bash
# List all available method documentation
ls @daf/methods/

# Find methods by functionality
grep "def train" @daf/methods/rl_*.md

# Check method signatures
grep "Signature:" @daf/methods/adaptive_adaptive_controller.md
```

#### 2. Structure Analysis
**MANDATORY**: Analyze repository structure before implementation:
```bash
# Understand module relationships
cat @daf/structure/method_distribution.json

# Check integration patterns
cat @daf/structure/integration_patterns.md

# Review repository architecture
cat @daf/structure/METTA_REPOSITORY_STRUCTURE.md
```

#### 3. DAF Source Code Development
**MANDATORY**: Develop DAF fork code in proper location:
```bash
# DAF fork source code location
ls daf/src/daf/

# DAF fork tests location
ls daf/tests/

# DAF fork configuration location
ls daf/configs/

# DAF fork outputs location
ls daf/outputs/
```

#### 4. Integration Planning
**MANDATORY**: Use documented integration points:
- Configuration and setup via `setup.metta_cli`
- Data management via `adaptive.stores.wandb`
- Analysis and reporting via `eval.analysis`
- RL training via `rl.trainer.Trainer`

### Documentation Coverage Requirements

#### Complete Coverage
**MANDATORY**: All Metta methods must be documented with:
- 200 Classes with constructor signatures
- 721 Functions with complete type annotations
- 545 Methods with full signatures
- 1466 Total documentable items

#### Enhanced Information
**MANDATORY**: Each method must include:
- **Source**: File path and line number
- **Imports**: Required dependencies
- **Signature**: Complete type information
- **Location**: Exact position in codebase
- **Documentation**: Extracted from docstrings

### DAF-Specific Documentation Rules

#### Location Independence
**MANDATORY**: DAF documentation structure is independent of general documentation:
- Never move DAF docs to `@doc/` or other locations
- DAF docs remain in `@daf/` regardless of other documentation changes
- This policy is entrenched and cannot be modified

#### Metadata Completeness
**MANDATORY**: Maintain complete metadata for all Metta methods:
- Repository statistics and distributions
- Module complexity analysis
- Integration patterns and best practices
- Method distribution and dependencies

#### Integration Optimization
**MANDATORY**: Structure documentation for maximal DAF fork utilization:
- Methods organized by functionality and complexity
- Clear integration patterns and examples
- Comprehensive error handling guidance
- Type-safe development practices

### Quality Standards

#### Type Annotations
**MANDATORY**: Always add type annotations to function parameters and return types:
```python
def train_policy(
    policy_uri: str,
    config: TrainerConfig,
    eval_config: Optional[EvalConfig] = None
) -> TrainingResults:
    pass
```

#### Error Handling
**MANDATORY**: Implement comprehensive error handling:
```python
try:
    controller = AdaptiveController(config=config)
    results = controller.run()
except AdaptiveControllerError as e:
    logger.error(f"Adaptive controller failed: {e}")
    raise
except Exception as e:
    logger.error(f"Unexpected error: {e}")
    raise
```

#### Configuration Management
**MANDATORY**: Use proper configuration management:
```python
from metta.setup.saved_settings import SavedSettings

settings = SavedSettings.get_saved_settings()
wandb_config = settings.get_component_config("wandb")
```

### Testing Requirements

#### Unit Testing
**MANDATORY**: Comprehensive unit tests for all components:
```python
import unittest
from metta.adaptive.adaptive_controller import AdaptiveController

class TestAdaptiveController(unittest.TestCase):
    def setUp(self):
        self.controller = AdaptiveController(
            config=AdaptiveConfig(),
            scheduler=MockScheduler(),
            dispatcher=MockDispatcher(),
            store=MockStore()
        )
```

#### Integration Testing
**MANDATORY**: Test integration patterns:
```python
def test_training_evaluation_integration():
    train_tool = TrainTool()
    train_results = train_tool.invoke(config=TrainConfig())

    eval_tool = EvalRemoteTool()
    eval_results = eval_tool.invoke(policy_uri=train_results.policy_uri)
```

### Development Best Practices

#### Naming Conventions
**MANDATORY**: Use descriptive variable names:
```python
# Good: Descriptive names
adaptive_controller = AdaptiveController(config=adaptive_config)
training_results = trainer.train(policy_uri=policy_uri)

# Avoid: Cryptic names
ac = AdaptiveController(config=acfg)  # Not allowed
res = t.train(pu=pu)  # Not allowed
```

#### Import Organization
**MANDATORY**: Import specific classes/functions:
```python
# Good: Specific imports
from metta.adaptive.adaptive_controller import AdaptiveController
from metta.rl.trainer import Trainer

# Avoid: Wildcard imports
from metta.adaptive import *  # Not allowed
```

#### Documentation
**MANDATORY**: Maintain comprehensive documentation:
- All public APIs documented
- Integration patterns documented
- Error handling documented
- Configuration options documented

### Enforcement

#### Location Policy Enforcement
**MANDATORY**: Both locations are entrenched and locked in - never move or relocate:

##### `@daf/` - Autogenerated Documentation Location
- Autogenerated documentation location is `@daf/` - this is entrenched
- All autogenerated Metta method documentation MUST use this location
- All documentation generation scripts MUST output to `@daf/`
- Any attempt to move autogenerated documentation will be reverted
- All DAF-related documentation must use established structure

##### `daf/` - DAF Fork Source Code Location
- DAF fork source code location is `daf/` - this is entrenched
- All DAF fork development MUST occur in this location
- All DAF fork tests, configs, outputs MUST be in this location
- Any attempt to move DAF fork code will be reverted
- All DAF fork materials must use established structure

#### Structure Compliance
- All new autogenerated documentation must follow established `@daf/` structure
- Methods go in `@daf/methods/` subfolder
- Metadata goes in `@daf/structure/` subfolder
- Integration patterns must be documented in `@daf/structure/`

- All new DAF fork code must follow established `daf/` structure
- Source code goes in `daf/src/daf/`
- Tests go in `daf/tests/`
- Configurations go in `daf/configs/`
- Outputs go in `daf/outputs/`

#### Integration Requirements
- All DAF fork code must use documented integration patterns
- Configuration must use documented setup procedures
- Error handling must follow documented patterns
- Testing must follow documented testing patterns

#### Autogeneration Policy
- All autogenerated content from Metta repository MUST go to `@daf/`
- No autogenerated content should go to `daf/`
- Documentation generation scripts must output to `@daf/`
- `@daf/` is exclusively for Metta-derived documentation

---

**ENTRENCHED**: This repository structure and location policy cannot be modified or relocated. All DAF fork development must follow these rules:

**Two Locations Policy**:
- `daf/` - DAF fork source code and materials (ENTRENCHED)
- `@daf/` - Autogenerated documentation from Metta (ENTRENCHED)

**Maximal Metta Method Utilization**: All development must leverage the comprehensive documentation in `@daf/` while developing code in `daf/`.
